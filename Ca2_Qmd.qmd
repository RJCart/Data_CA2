---
title: "Ca2"
author: "Ruth C"
format: html
editor: visual
---

## Part A: SQL

```{r}
#install.packages("broom")
install.packages("reshape2")
```

```{r}


#Packages
library(DBI)
library(RSQLite)
library(odbc)
library(knitr)
library(ggplot2)
library(broom)
library(reshape2)

```

```{r}
#data
db_path <- "C:/Users/Ruth/Desktop/Ca1_RuthC/Data_CA2/ICA_2023.sqlite"
con <- dbConnect(RSQLite::SQLite(), dbname = "ICA_2023.sqlite")

```

List Of Tables

```{r}

#List names of tables

con <- dbConnect(SQLite(), dbname = "C:/Users/Ruth/Desktop/Ca1_RuthC/Data_CA2/ICA_2023.sqlite")

# List tables
tables <- dbListTables(con)

# Print their names
print(tables)

con <- dbConnect(SQLite(), dbname = "ICA_2023.sqlite")
```

1.  The Budget and number of Projects for each Country.

```{sql connection=con}
SELECT 
    c.CustomerCountry AS country,
    SUM(p.budget) AS total_budget,
    COUNT(p.ProjectID) AS project_count
FROM 
    Customers c
JOIN 
    Projects p
ON 
    c.CustomerID = p.CustomerID
GROUP BY 
    c.CustomerCountry
ORDER BY 
    total_budget DESC;
```

2.  Average Development time for each project.

```{sql connection=con}
--Project Duration


SELECT 
    a.ProjectID,
    julianday(ActualCompletionDate) - julianday(CreationDate) AS project_duration_days
FROM 
    Assets a
JOIN 
    Timelines t
ON 
    a.ProjectID = t.ProjectID
WHERE 
    CreationDate IS NOT NULL 
    AND ActualCompletionDate IS NOT NULL;
```

Added number of assets for each project for interest.

```{sql connection=con}

--Project Duration categorised by No. of assets used

SELECT 
    asset_count.ProjectID,
    asset_count.num_assets AS number_of_assets,
    project_durations.project_duration AS project_duration_days
FROM 
    (
        -- Number of assets 
        SELECT 
            ProjectID, 
            COUNT(AssetID) AS num_assets
        FROM 
            Assets
        GROUP BY 
            ProjectID
    ) AS asset_count
JOIN 
    (
        -- Duration 
        SELECT 
            a.ProjectID,
            julianday(t.ActualCompletionDate) - julianday(MIN(a.CreationDate)) AS project_duration
        FROM 
            Assets a
        JOIN 
            Timelines t
        ON 
            a.ProjectID = t.ProjectID
        WHERE 
            a.CreationDate IS NOT NULL AND t.ActualCompletionDate IS NOT NULL
        GROUP BY 
            a.ProjectID
    ) AS project_durations
ON 
    asset_count.ProjectID = project_durations.ProjectID
ORDER BY 
    project_durations.project_duration DESC;
```

3.  Top Three Developers (DeveloperID) based on successful projects. The successful projects are those which were completed on or before the expected completion date.

```{sql connection=con}

-- Most Successful Developers
SELECT 
    pd.DeveloperID,
    COUNT(DISTINCT pd.ProjectID) AS successful_projects_count
FROM 
    ProjectDevelopers pd
JOIN 
    Timelines t
ON 
    pd.ProjectID = t.ProjectID
WHERE 
    julianday(t.ActualCompletionDate) <= julianday(t.ExpectedCompletionDate)
GROUP BY 
    pd.DeveloperID
ORDER BY 
    successful_projects_count DESC
LIMIT 3;
```

## Part A: SQL concepts demo.

1.  Select with Like and Or.

    Listing textures and animations and their creation date.

```{sql connection=con}
--Selecting information about the creation date of animations and textures with Like and Or 

SELECT 
    Type, 
    CreationDate
    
FROM 
    Assets
WHERE 
    Type LIKE '%Animation%' OR Type LIKE '%Texture%';
```

2.  Select with DISTINCT AND ORDER BY

    Showing AssetIDs ordered by their creation dates.

```{sql connection=con}

-- Order AssetIDs by their creation date using Distinct and Order by
SELECT 
    DISTINCT AssetID,
    CreationDate
FROM 
    Assets
ORDER BY 
    CreationDate ASC;
```

3.  Subquery with SELECT

    Finding the number of developers who have five or more years experience and categorising them as experienced_developers.

```{sql connection=con}

--Find experienced developers on team

SELECT 
    COUNT(*) AS experienced_developers
FROM 
    Developers
WHERE 
    Name IN (
        SELECT 
            Name
        FROM 
            Developers
        WHERE 
            ExperienceYears > 5
    );


```

## Part B: Linear Regression

1.  Model

```{r}

# access success rate data
con <- dbConnect(RSQLite::SQLite(), dbname = "ICA_2023.sqlite")
data <- dbGetQuery(con, "
SELECT 
    p.ProjectID,
    p.ProjectName,
    p.Budget,
    COUNT(ad.DeveloperID) AS team_size,
    (COUNT(CASE 
             WHEN julianday(t.ActualCompletionDate) <= julianday(t.ExpectedCompletionDate) THEN 1 
         END) * 100.0 / COUNT(*)) AS success_rate
FROM 
    Projects p
LEFT JOIN 
    Assets a
ON 
    p.ProjectID = a.ProjectID
LEFT JOIN 
    AssetsDevelopers ad
ON 
    a.AssetID = ad.AssetID
LEFT JOIN 
    Timelines t
ON 
    p.ProjectID = t.ProjectID
GROUP BY 
    p.ProjectID, p.ProjectName, p.Budget;
")

dbDisconnect(con)

# Linerar Model
model <- lm(success_rate ~ Budget + team_size, data = data)
summary(model)

# Results Plot
ggplot(data, aes(x = Budget, y = success_rate, color = team_size)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
  labs(
    title = "Linear Regression: Success Rate vs Budget and Team Size",
    x = "Budget (in dollars)",
    y = "Success Rate (%)",
    color = "Team Size"
  ) +
  theme_minimal()
```

2.  Interpret.

Used Broom Package to create a table which shows how the predictors effect the dependent variable.

```{r}
tidy_table <- tidy(model)
print(tidy_table)
```

For the Budget, a higher budget predicts a slightly higher success rate. For the team size, a higher team size predicts a higher success rate.

The P value for budget is \<.05 The Pvalue for team size is \<.05

We can determine that a higher team size and budget predicts a greater success rate.

3.  Reliability

```{r}
# Count missing values in each column
colSums(is.na(data))

# Percentage of missing values per column
colMeans(is.na(data)) * 100
```

```{r}
summary(data)
```

```{}
```

Created a Correlation Matrix which seems to suggest the data is reliable.

```{r}
cor_matrix <- cor(data[, c("Budget", "team_size", "success_rate")], use = "complete.obs")
print(cor_matrix)

```
